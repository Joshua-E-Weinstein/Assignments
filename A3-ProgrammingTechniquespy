from graph import *
from bfs import *

file = open(input("Please enter a file name."), 'r')  # Asks user for file name and opens it.
lines = [line for line in file]  # Seperates file into lines.

bookLength = int(lines.pop(0))  # Gets length of book.
book = digraph(bookLength + 1)
endingPages = []  # List to store ending pages.

count = 0  # Counts through the pages of the book.
for line in lines:

    count += 1
    numbers = line.split()

    if int(numbers[0]) == 0:  # Checks for ending pages
        endingPages.append(count)
        continue

    for number in numbers:  # Adds page connections to graph.
        book.addEdge(count, int(number))

search = BFS(book, 1)  # Searches book paths.

# Checks if each page is reachable.
reachable = True
for i in range(2, bookLength+1):
    if not search.hasPathTo(i):  # Checks if page has a path that reaches it.
        reachable = False
        break

# Prints whether each page of the book is reachable.
if reachable:
    print("Y")
else:
    print("N")

# Finds shortest path to end page.
shortestPath = bookLength
shortestPathAmount = 0
for page in endingPages:
    pathLength = search.distTo(page) + 1
    if pathLength <= 1:  # Checks for impossible length.
        continue
    if pathLength < shortestPath:  # Checks for new shortest path.
        shortestPath = pathLength
        shortestPathAmount = 1
    elif pathLength == shortestPath:
        shortestPathAmount += 1

print(shortestPath)  # Prints shortest path.
print(shortestPathAmount)  # Prints the amount of paths with the same shortest length.

# Finds the page with the most references to it.
reversedBook = book.reverse()  # Reversed book graph
mostPathsTo = (0, 0)  # Stores the page number with the most references to it as well as the number of references.
for i in range(1, bookLength+1):
    pathsTo = len(reversedBook.adj(i))
    if pathsTo > mostPathsTo[1]:  # Checks for new largest amount of references.
        mostPathsTo = i, pathsTo

print(mostPathsTo[0], mostPathsTo[1])  # Prints page number and the number of references.
