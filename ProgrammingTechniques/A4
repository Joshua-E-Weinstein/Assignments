folds = 5
testSize = round(len(dataset) / folds)
confusionMatrix = [[0, 0], [0, 0]]
for fold in range(folds):

    # Question 1:
    shuffle(dataset)  # Shuffles data

    # Splits data
    testSet = dataset[:testSize]
    trainingSet = dataset[testSize:]

    # Question 2:

    # Variables to temporarily store information in each fold for the confusion matrix.
    truePositive = 0
    falsePositive = 0
    trueNegative = 0
    falseNegative = 0

    extraTree = extra_tree()  # Initializes the extra trees algorithm.

    extraTree.train(trainingSet)  # Trains the extra trees algorithm on the dataset.

    for item in testSet:
        prediction = extraTree.predict(item.data)

        # Question 3:

        # Checks prediction validity, adding to corresponding variable.
        if prediction == item.label:
            if prediction == 1:
                truePositive += 1
            else:
                trueNegative += 1
        else:
            if prediction == 1:
                falsePositive += 1
            else:
                falseNegative += 1

    # Updates confusion matrix.
    confusionMatrix[0][0] += trueNegative
    confusionMatrix[0][1] += falseNegative
    confusionMatrix[1][0] += falsePositive
    confusionMatrix[1][1] += truePositive

    print("Confusion Matrix:", confusionMatrix)

# Question 4

# Sets clearer variables to refer to confusion matrix values.
TN = confusionMatrix[0][0]
FN = confusionMatrix[0][1]
FP = confusionMatrix[1][0]
TP = confusionMatrix[1][1]

# Calculates TPR and FPR
truePositiveRate = TP / (TP + FP)
falsePositiveRate = 1 - truePositiveRate

# Prints TPR and FPR
print("True Positive Rate:", truePositiveRate)
print("False Positive Rate:", falsePositiveRate)
